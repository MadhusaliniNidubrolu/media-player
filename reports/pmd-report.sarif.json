{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "PMD",
          "version": "7.0.0-rc3",
          "informationUri": "https://docs.pmd-code.org/latest/",
          "rules": [
            {
              "id": "CommentRequired",
              "shortDescription": {
                "text": "CommentRequired: Class comments are required"
              },
              "fullDescription": {
                "text": "\nDenotes whether javadoc (formal) comments are required (or unwanted) for specific language elements.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_documentation.html#commentrequired",
              "help": {
                "text": "\nDenotes whether javadoc (formal) comments are required (or unwanted) for specific language elements.\n        "
              },
              "properties": {
                "ruleset": "Documentation",
                "priority": 3,
                "tags": [
                  "Documentation"
                ]
              }
            },
            {
              "id": "UseUtilityClass",
              "shortDescription": {
                "text": "UseUtilityClass: This utility class has a non-private constructor"
              },
              "fullDescription": {
                "text": "\nFor classes that only have static methods, consider making them utility classes.\nNote that this doesn't apply to abstract classes, since their subclasses may\nwell include non-static methods.  Also, if you want this class to be a utility class,\nremember to add a private constructor to prevent instantiation.\n(Note, that this use was known before PMD 5.1.0 as UseSingleton).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_design.html#useutilityclass",
              "help": {
                "text": "\nFor classes that only have static methods, consider making them utility classes.\nNote that this doesn't apply to abstract classes, since their subclasses may\nwell include non-static methods.  Also, if you want this class to be a utility class,\nremember to add a private constructor to prevent instantiation.\n(Note, that this use was known before PMD 5.1.0 as UseSingleton).\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "CommentRequired",
              "shortDescription": {
                "text": "CommentRequired: Public method and constructor comments are required"
              },
              "fullDescription": {
                "text": "\nDenotes whether javadoc (formal) comments are required (or unwanted) for specific language elements.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_documentation.html#commentrequired",
              "help": {
                "text": "\nDenotes whether javadoc (formal) comments are required (or unwanted) for specific language elements.\n        "
              },
              "properties": {
                "ruleset": "Documentation",
                "priority": 3,
                "tags": [
                  "Documentation"
                ]
              }
            },
            {
              "id": "MethodArgumentCouldBeFinal",
              "shortDescription": {
                "text": "MethodArgumentCouldBeFinal: Parameter 'args' is not assigned and could be declared final"
              },
              "fullDescription": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#methodargumentcouldbefinal",
              "help": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "UnnecessaryImport: Unused import 'org.springframework.http.ResponseEntity'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "UnnecessaryImport: Unused import 'org.springframework.web.bind.annotation.ExceptionHandler'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "UnnecessaryImport: Unused import 'org.springframework.web.bind.annotation.PutMapping'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "UnnecessaryImport: Unused import 'org.springframework.web.bind.annotation.RequestParam'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "UnnecessaryImport: Unused import 'org.springframework.web.method.annotation.MethodArgumentTypeMismatchException'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "UnnecessaryImport: Unused import 'com.mediaplayer.service.CommentService'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "UnnecessaryImport: Unused import 'jakarta.persistence.EntityManager'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "UnnecessaryImport: Unused import 'jakarta.persistence.PersistenceContext'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "AtLeastOneConstructor",
              "shortDescription": {
                "text": "AtLeastOneConstructor: Each class should declare at least one constructor"
              },
              "fullDescription": {
                "text": "\n\nEach non-static class should declare at least one constructor.\nClasses with solely static members are ignored, refer to [UseUtilityClassRule](pmd_rules_java_design.html#useutilityclass) to detect those.\n\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#atleastoneconstructor",
              "help": {
                "text": "\n\nEach non-static class should declare at least one constructor.\nClasses with solely static members are ignored, refer to [UseUtilityClassRule](pmd_rules_java_design.html#useutilityclass) to detect those.\n\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "CommentRequired",
              "shortDescription": {
                "text": "CommentRequired: Field comments are required"
              },
              "fullDescription": {
                "text": "\nDenotes whether javadoc (formal) comments are required (or unwanted) for specific language elements.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_documentation.html#commentrequired",
              "help": {
                "text": "\nDenotes whether javadoc (formal) comments are required (or unwanted) for specific language elements.\n        "
              },
              "properties": {
                "ruleset": "Documentation",
                "priority": 3,
                "tags": [
                  "Documentation"
                ]
              }
            },
            {
              "id": "CommentDefaultAccessModifier",
              "shortDescription": {
                "text": "CommentDefaultAccessModifier: Missing commented default access modifier on field 'logger'"
              },
              "fullDescription": {
                "text": "\nTo avoid mistakes if we want that an Annotation, Class, Enum, Method, Constructor or Field have a default access modifier\nwe must add a comment at the beginning of its declaration.\nBy default, the comment must be `/* default */` or `/* package */`, if you want another, you have to provide a regular expression.\n\nThis rule ignores by default all cases that have a `@VisibleForTesting` annotation or any JUnit5/TestNG annotation. Use the\nproperty \"ignoredAnnotations\" to customize the recognized annotations.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#commentdefaultaccessmodifier",
              "help": {
                "text": "\nTo avoid mistakes if we want that an Annotation, Class, Enum, Method, Constructor or Field have a default access modifier\nwe must add a comment at the beginning of its declaration.\nBy default, the comment must be `/* default */` or `/* package */`, if you want another, you have to provide a regular expression.\n\nThis rule ignores by default all cases that have a `@VisibleForTesting` annotation or any JUnit5/TestNG annotation. Use the\nproperty \"ignoredAnnotations\" to customize the recognized annotations.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodArgumentCouldBeFinal",
              "shortDescription": {
                "text": "MethodArgumentCouldBeFinal: Parameter 'c' is not assigned and could be declared final"
              },
              "fullDescription": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#methodargumentcouldbefinal",
              "help": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ShortVariable",
              "shortDescription": {
                "text": "ShortVariable: Avoid variables with short names like c"
              },
              "fullDescription": {
                "text": "\nFields, local variables, enum constant names or parameter names that are very short are not helpful to the reader.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#shortvariable",
              "help": {
                "text": "\nFields, local variables, enum constant names or parameter names that are very short are not helpful to the reader.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableCouldBeFinal",
              "shortDescription": {
                "text": "LocalVariableCouldBeFinal: Local variable 'comment' could be declared final"
              },
              "fullDescription": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#localvariablecouldbefinal",
              "help": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryLocalBeforeReturn",
              "shortDescription": {
                "text": "UnnecessaryLocalBeforeReturn: Consider simply returning the value vs storing it in local variable 'comment'"
              },
              "fullDescription": {
                "text": "\nAvoid the creation of unnecessary local variables\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#unnecessarylocalbeforereturn",
              "help": {
                "text": "\nAvoid the creation of unnecessary local variables\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodArgumentCouldBeFinal",
              "shortDescription": {
                "text": "MethodArgumentCouldBeFinal: Parameter 'videoId' is not assigned and could be declared final"
              },
              "fullDescription": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#methodargumentcouldbefinal",
              "help": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodArgumentCouldBeFinal",
              "shortDescription": {
                "text": "MethodArgumentCouldBeFinal: Parameter 'commentId' is not assigned and could be declared final"
              },
              "fullDescription": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#methodargumentcouldbefinal",
              "help": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodArgumentCouldBeFinal",
              "shortDescription": {
                "text": "MethodArgumentCouldBeFinal: Parameter 'response' is not assigned and could be declared final"
              },
              "fullDescription": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#methodargumentcouldbefinal",
              "help": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "UnnecessaryImport: Unused import 'lombok.AllArgsConstructor'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "UnnecessaryImport: Unused import 'lombok.Data'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "DataClass",
              "shortDescription": {
                "text": "DataClass: The class 'Comment' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=12, WMC=13)"
              },
              "fullDescription": {
                "text": "\nData Classes are simple data holders, which reveal most of their state, and\nwithout complex functionality. The lack of functionality may indicate that\ntheir behaviour is defined elsewhere, which is a sign of poor data-behaviour\nproximity. By directly exposing their internals, Data Classes break encapsulation,\nand therefore reduce the system's maintainability and understandability. Moreover,\nclasses tend to strongly rely on their data representation, which makes for a brittle\ndesign.\n\nRefactoring a Data Class should focus on restoring a good data-behaviour proximity. In\nmost cases, that means moving the operations defined on the data back into the class.\nIn some other cases it may make sense to remove entirely the class and move the data\ninto the former client classes.\n\nThe rule uses metrics to implement its detection strategy. The violation message\ngives information about the values of these metrics:\n* WMC: a class complexity measure for a class, see {% jdoc java::lang.java.metrics.JavaMetrics#WEIGHED_METHOD_COUNT %}\n* WOC: a 'non-triviality' measure for a class, see {% jdoc java::lang.java.metrics.JavaMetrics#WEIGHT_OF_CLASS %}\n* NOPA: number of public attributes, see {% jdoc java::lang.java.metrics.JavaMetrics#NUMBER_OF_PUBLIC_FIELDS %}\n* NOAM: number of public accessor methods, see {% jdoc java::lang.java.metrics.JavaMetrics#NUMBER_OF_ACCESSORS %}\n\nThe rule identifies a god class by looking for classes which have all of the following properties:\n* High NOPA + NOAM\n* Low WOC\n* Low WMC\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_design.html#dataclass",
              "help": {
                "text": "\nData Classes are simple data holders, which reveal most of their state, and\nwithout complex functionality. The lack of functionality may indicate that\ntheir behaviour is defined elsewhere, which is a sign of poor data-behaviour\nproximity. By directly exposing their internals, Data Classes break encapsulation,\nand therefore reduce the system's maintainability and understandability. Moreover,\nclasses tend to strongly rely on their data representation, which makes for a brittle\ndesign.\n\nRefactoring a Data Class should focus on restoring a good data-behaviour proximity. In\nmost cases, that means moving the operations defined on the data back into the class.\nIn some other cases it may make sense to remove entirely the class and move the data\ninto the former client classes.\n\nThe rule uses metrics to implement its detection strategy. The violation message\ngives information about the values of these metrics:\n* WMC: a class complexity measure for a class, see {% jdoc java::lang.java.metrics.JavaMetrics#WEIGHED_METHOD_COUNT %}\n* WOC: a 'non-triviality' measure for a class, see {% jdoc java::lang.java.metrics.JavaMetrics#WEIGHT_OF_CLASS %}\n* NOPA: number of public attributes, see {% jdoc java::lang.java.metrics.JavaMetrics#NUMBER_OF_PUBLIC_FIELDS %}\n* NOAM: number of public accessor methods, see {% jdoc java::lang.java.metrics.JavaMetrics#NUMBER_OF_ACCESSORS %}\n\nThe rule identifies a god class by looking for classes which have all of the following properties:\n* High NOPA + NOAM\n* Low WOC\n* Low WMC\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "MethodArgumentCouldBeFinal",
              "shortDescription": {
                "text": "MethodArgumentCouldBeFinal: Parameter 'date' is not assigned and could be declared final"
              },
              "fullDescription": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#methodargumentcouldbefinal",
              "help": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodArgumentCouldBeFinal",
              "shortDescription": {
                "text": "MethodArgumentCouldBeFinal: Parameter 'message' is not assigned and could be declared final"
              },
              "fullDescription": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#methodargumentcouldbefinal",
              "help": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodArgumentCouldBeFinal",
              "shortDescription": {
                "text": "MethodArgumentCouldBeFinal: Parameter 'time' is not assigned and could be declared final"
              },
              "fullDescription": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#methodargumentcouldbefinal",
              "help": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodArgumentCouldBeFinal",
              "shortDescription": {
                "text": "MethodArgumentCouldBeFinal: Parameter 'userId' is not assigned and could be declared final"
              },
              "fullDescription": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#methodargumentcouldbefinal",
              "help": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "PackageCase",
              "shortDescription": {
                "text": "PackageCase: Package name contains upper case characters"
              },
              "fullDescription": {
                "text": "\nDetects when a package definition contains uppercase characters.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#packagecase",
              "help": {
                "text": "\nDetects when a package definition contains uppercase characters.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodArgumentCouldBeFinal",
              "shortDescription": {
                "text": "MethodArgumentCouldBeFinal: Parameter 'ex' is not assigned and could be declared final"
              },
              "fullDescription": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#methodargumentcouldbefinal",
              "help": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ShortVariable",
              "shortDescription": {
                "text": "ShortVariable: Avoid variables with short names like ex"
              },
              "fullDescription": {
                "text": "\nFields, local variables, enum constant names or parameter names that are very short are not helpful to the reader.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#shortvariable",
              "help": {
                "text": "\nFields, local variables, enum constant names or parameter names that are very short are not helpful to the reader.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableCouldBeFinal",
              "shortDescription": {
                "text": "LocalVariableCouldBeFinal: Local variable 'errorResponse' could be declared final"
              },
              "fullDescription": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#localvariablecouldbefinal",
              "help": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "UnnecessaryImport: Unused import 'org.springframework.web.bind.annotation.ResponseStatus'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MissingSerialVersionUID",
              "shortDescription": {
                "text": "MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID"
              },
              "fullDescription": {
                "text": "\nSerializable classes should provide a serialVersionUID field.\nThe serialVersionUID field is also needed for abstract base classes. Each individual class in the inheritance\nchain needs an own serialVersionUID field. See also [Should an abstract class have a serialVersionUID](https://stackoverflow.com/questions/893259/should-an-abstract-class-have-a-serialversionuid).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_errorprone.html#missingserialversionuid",
              "help": {
                "text": "\nSerializable classes should provide a serialVersionUID field.\nThe serialVersionUID field is also needed for abstract base classes. Each individual class in the inheritance\nchain needs an own serialVersionUID field. See also [Should an abstract class have a serialVersionUID](https://stackoverflow.com/questions/893259/should-an-abstract-class-have-a-serialversionuid).\n        "
              },
              "properties": {
                "ruleset": "Error Prone",
                "priority": 3,
                "tags": [
                  "Error Prone"
                ]
              }
            },
            {
              "id": "CallSuperInConstructor",
              "shortDescription": {
                "text": "CallSuperInConstructor: It is a good practice to call super() in a constructor"
              },
              "fullDescription": {
                "text": "\nIt is a good practice to call super() in a constructor. If super() is not called but\nanother constructor (such as an overloaded constructor) is called, this rule will not report it.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#callsuperinconstructor",
              "help": {
                "text": "\nIt is a good practice to call super() in a constructor. If super() is not called but\nanother constructor (such as an overloaded constructor) is called, this rule will not report it.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodArgumentCouldBeFinal",
              "shortDescription": {
                "text": "MethodArgumentCouldBeFinal: Parameter 'status' is not assigned and could be declared final"
              },
              "fullDescription": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#methodargumentcouldbefinal",
              "help": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MissingOverride",
              "shortDescription": {
                "text": "MissingOverride: The method 'getMessage()' is missing an @Override annotation."
              },
              "fullDescription": {
                "text": "\n            Annotating overridden methods with @Override ensures at compile time that\n            the method really overrides one, which helps refactoring and clarifies intent.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_bestpractices.html#missingoverride",
              "help": {
                "text": "\n            Annotating overridden methods with @Override ensures at compile time that\n            the method really overrides one, which helps refactoring and clarifies intent.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "FormalParameterNamingConventions: The method parameter name 'VideoId' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. method parameter, or final method parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Apex naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_apex_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. method parameter, or final method parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Apex naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ImmutableField",
              "shortDescription": {
                "text": "ImmutableField: Field 'status' may be declared final"
              },
              "fullDescription": {
                "text": "\nReports non-final fields whose value never changes once object initialization ends,\nand hence may be marked final.\n\nNote that this rule does not enforce that the field value be deeply immutable itself.\nAn object can still have mutable state, even if all its member fields are declared final.\nThis is referred to as shallow immutability. For more information on mutability,\nsee *Effective Java, 3rd Edition, Item 17: Minimize mutability*.\n\nLimitations: We can only check private fields for now.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_design.html#immutablefield",
              "help": {
                "text": "\nReports non-final fields whose value never changes once object initialization ends,\nand hence may be marked final.\n\nNote that this rule does not enforce that the field value be deeply immutable itself.\nAn object can still have mutable state, even if all its member fields are declared final.\nThis is referred to as shallow immutability. For more information on mutability,\nsee *Effective Java, 3rd Edition, Item 17: Minimize mutability*.\n\nLimitations: We can only check private fields for now.\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "ImmutableField",
              "shortDescription": {
                "text": "ImmutableField: Field 'message' may be declared final"
              },
              "fullDescription": {
                "text": "\nReports non-final fields whose value never changes once object initialization ends,\nand hence may be marked final.\n\nNote that this rule does not enforce that the field value be deeply immutable itself.\nAn object can still have mutable state, even if all its member fields are declared final.\nThis is referred to as shallow immutability. For more information on mutability,\nsee *Effective Java, 3rd Edition, Item 17: Minimize mutability*.\n\nLimitations: We can only check private fields for now.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_design.html#immutablefield",
              "help": {
                "text": "\nReports non-final fields whose value never changes once object initialization ends,\nand hence may be marked final.\n\nNote that this rule does not enforce that the field value be deeply immutable itself.\nAn object can still have mutable state, even if all its member fields are declared final.\nThis is referred to as shallow immutability. For more information on mutability,\nsee *Effective Java, 3rd Edition, Item 17: Minimize mutability*.\n\nLimitations: We can only check private fields for now.\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "ImmutableField",
              "shortDescription": {
                "text": "ImmutableField: Field 'timestamp' may be declared final"
              },
              "fullDescription": {
                "text": "\nReports non-final fields whose value never changes once object initialization ends,\nand hence may be marked final.\n\nNote that this rule does not enforce that the field value be deeply immutable itself.\nAn object can still have mutable state, even if all its member fields are declared final.\nThis is referred to as shallow immutability. For more information on mutability,\nsee *Effective Java, 3rd Edition, Item 17: Minimize mutability*.\n\nLimitations: We can only check private fields for now.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_design.html#immutablefield",
              "help": {
                "text": "\nReports non-final fields whose value never changes once object initialization ends,\nand hence may be marked final.\n\nNote that this rule does not enforce that the field value be deeply immutable itself.\nAn object can still have mutable state, even if all its member fields are declared final.\nThis is referred to as shallow immutability. For more information on mutability,\nsee *Effective Java, 3rd Edition, Item 17: Minimize mutability*.\n\nLimitations: We can only check private fields for now.\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "MethodArgumentCouldBeFinal",
              "shortDescription": {
                "text": "MethodArgumentCouldBeFinal: Parameter 'timestamp' is not assigned and could be declared final"
              },
              "fullDescription": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#methodargumentcouldbefinal",
              "help": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ImmutableField",
              "shortDescription": {
                "text": "ImmutableField: Field 'commentRepo' may be declared final"
              },
              "fullDescription": {
                "text": "\nReports non-final fields whose value never changes once object initialization ends,\nand hence may be marked final.\n\nNote that this rule does not enforce that the field value be deeply immutable itself.\nAn object can still have mutable state, even if all its member fields are declared final.\nThis is referred to as shallow immutability. For more information on mutability,\nsee *Effective Java, 3rd Edition, Item 17: Minimize mutability*.\n\nLimitations: We can only check private fields for now.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_design.html#immutablefield",
              "help": {
                "text": "\nReports non-final fields whose value never changes once object initialization ends,\nand hence may be marked final.\n\nNote that this rule does not enforce that the field value be deeply immutable itself.\nAn object can still have mutable state, even if all its member fields are declared final.\nThis is referred to as shallow immutability. For more information on mutability,\nsee *Effective Java, 3rd Edition, Item 17: Minimize mutability*.\n\nLimitations: We can only check private fields for now.\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "MethodArgumentCouldBeFinal",
              "shortDescription": {
                "text": "MethodArgumentCouldBeFinal: Parameter 'commentRepo' is not assigned and could be declared final"
              },
              "fullDescription": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#methodargumentcouldbefinal",
              "help": {
                "text": "\nA method argument that is never re-assigned within the method can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "AvoidUncheckedExceptionsInSignatures",
              "shortDescription": {
                "text": "AvoidUncheckedExceptionsInSignatures: A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause"
              },
              "fullDescription": {
                "text": "\nReports unchecked exceptions in the `throws` clause of a method or constructor.\nJava doesn't force the caller to handle an unchecked exception,\nso it's unnecessary except for documentation. A better practice is to document the\nexceptional cases with a `@throws` Javadoc tag, which allows being more descriptive.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures",
              "help": {
                "text": "\nReports unchecked exceptions in the `throws` clause of a method or constructor.\nJava doesn't force the caller to handle an unchecked exception,\nso it's unnecessary except for documentation. A better practice is to document the\nexceptional cases with a `@throws` Javadoc tag, which allows being more descriptive.\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "MissingOverride",
              "shortDescription": {
                "text": "MissingOverride: The method 'addnewComment(Comment)' is missing an @Override annotation."
              },
              "fullDescription": {
                "text": "\n            Annotating overridden methods with @Override ensures at compile time that\n            the method really overrides one, which helps refactoring and clarifies intent.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_bestpractices.html#missingoverride",
              "help": {
                "text": "\n            Annotating overridden methods with @Override ensures at compile time that\n            the method really overrides one, which helps refactoring and clarifies intent.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MissingOverride",
              "shortDescription": {
                "text": "MissingOverride: The method 'allComments(int)' is missing an @Override annotation."
              },
              "fullDescription": {
                "text": "\n            Annotating overridden methods with @Override ensures at compile time that\n            the method really overrides one, which helps refactoring and clarifies intent.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_bestpractices.html#missingoverride",
              "help": {
                "text": "\n            Annotating overridden methods with @Override ensures at compile time that\n            the method really overrides one, which helps refactoring and clarifies intent.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "LocalVariableCouldBeFinal",
              "shortDescription": {
                "text": "LocalVariableCouldBeFinal: Local variable 'list' could be declared final"
              },
              "fullDescription": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#localvariablecouldbefinal",
              "help": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MissingOverride",
              "shortDescription": {
                "text": "MissingOverride: The method 'deleteComment(int)' is missing an @Override annotation."
              },
              "fullDescription": {
                "text": "\n            Annotating overridden methods with @Override ensures at compile time that\n            the method really overrides one, which helps refactoring and clarifies intent.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_bestpractices.html#missingoverride",
              "help": {
                "text": "\n            Annotating overridden methods with @Override ensures at compile time that\n            the method really overrides one, which helps refactoring and clarifies intent.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "LocalVariableCouldBeFinal",
              "shortDescription": {
                "text": "LocalVariableCouldBeFinal: Local variable 'c' could be declared final"
              },
              "fullDescription": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#localvariablecouldbefinal",
              "help": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "UnnecessaryImport: Unused import 'com.mediaplayer.exceptions.InvalidCommentException'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "JUnitTestsShouldIncludeAssert",
              "shortDescription": {
                "text": "JUnitTestsShouldIncludeAssert: JUnit tests should include assert() or fail()"
              },
              "fullDescription": {
                "text": "\nJUnit tests should include at least one assertion.  This makes the tests more robust, and using assert\nwith messages provide the developer a clearer idea of what the test does.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_bestpractices.html#junittestsshouldincludeassert",
              "help": {
                "text": "\nJUnit tests should include at least one assertion.  This makes the tests more robust, and using assert\nwith messages provide the developer a clearer idea of what the test does.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UncommentedEmptyMethodBody",
              "shortDescription": {
                "text": "UncommentedEmptyMethodBody: Document empty method body"
              },
              "fullDescription": {
                "text": "\nUncommented Empty Method Body finds instances where a method body does not contain\nstatements, but there is no comment. By explicitly commenting empty method bodies\nit is easier to distinguish between intentional (commented) and unintentional\nempty methods.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_documentation.html#uncommentedemptymethodbody",
              "help": {
                "text": "\nUncommented Empty Method Body finds instances where a method body does not contain\nstatements, but there is no comment. By explicitly commenting empty method bodies\nit is easier to distinguish between intentional (commented) and unintentional\nempty methods.\n        "
              },
              "properties": {
                "ruleset": "Documentation",
                "priority": 3,
                "tags": [
                  "Documentation"
                ]
              }
            },
            {
              "id": "TooManyStaticImports",
              "shortDescription": {
                "text": "TooManyStaticImports: Too many static imports may lead to messy code"
              },
              "fullDescription": {
                "text": "\nIf you overuse the static import feature, it can make your program unreadable and\nunmaintainable, polluting its namespace with all the static members you import.\nReaders of your code (including you, a few months after you wrote it) will not know\nwhich class a static member comes from (Sun 1.5 Language Guide).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#toomanystaticimports",
              "help": {
                "text": "\nIf you overuse the static import feature, it can make your program unreadable and\nunmaintainable, polluting its namespace with all the static members you import.\nReaders of your code (including you, a few months after you wrote it) will not know\nwhich class a static member comes from (Sun 1.5 Language Guide).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "ClassNamingConventions: The class name 'commentServiceImplStub' doesn't match '^Test.*$|^[A-Z][a-zA-Z0-9]*Test(s|Case)?$'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Apex naming convention (Pascal case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_apex_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default this rule uses the standard Apex naming convention (Pascal case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "JUnit5TestShouldBePackagePrivate",
              "shortDescription": {
                "text": "JUnit5TestShouldBePackagePrivate: JUnit 5 tests should be package-private."
              },
              "fullDescription": {
                "text": "\nReports JUnit 5 test classes and methods that are not package-private.\nContrary to JUnit 4 tests, which required public visibility to be run by the engine,\nJUnit 5 tests can also be run if they're package-private. Marking them as such\nis a good practice to limit their visibility.\n\nTest methods are identified as those which use `@Test`, `@RepeatedTest`,\n`@TestFactory`, `@TestTemplate` or `@ParameterizedTest`.\n            "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_bestpractices.html#junit5testshouldbepackageprivate",
              "help": {
                "text": "\nReports JUnit 5 test classes and methods that are not package-private.\nContrary to JUnit 4 tests, which required public visibility to be run by the engine,\nJUnit 5 tests can also be run if they're package-private. Marking them as such\nis a good practice to limit their visibility.\n\nTest methods are identified as those which use `@Test`, `@RepeatedTest`,\n`@TestFactory`, `@TestTemplate` or `@ParameterizedTest`.\n            "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "LongVariable",
              "shortDescription": {
                "text": "LongVariable: Avoid excessively long variable names like globalExceptionHandler"
              },
              "fullDescription": {
                "text": "\nFields, formal arguments, or local variable names that are too long can make the code difficult to follow.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#longvariable",
              "help": {
                "text": "\nFields, formal arguments, or local variable names that are too long can make the code difficult to follow.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "JUnitTestContainsTooManyAsserts",
              "shortDescription": {
                "text": "JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s)."
              },
              "fullDescription": {
                "text": "\nUnit tests should not contain too many asserts. Many asserts are indicative of a complex test, for which\nit is harder to verify correctness.  Consider breaking the test scenario into multiple, shorter test scenarios.\nCustomize the maximum number of assertions used by this Rule to suit your needs.\n\nThis rule checks for JUnit4, JUnit5 and TestNG Tests, as well as methods starting with \"test\".\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_bestpractices.html#junittestcontainstoomanyasserts",
              "help": {
                "text": "\nUnit tests should not contain too many asserts. Many asserts are indicative of a complex test, for which\nit is harder to verify correctness.  Consider breaking the test scenario into multiple, shorter test scenarios.\nCustomize the maximum number of assertions used by this Rule to suit your needs.\n\nThis rule checks for JUnit4, JUnit5 and TestNG Tests, as well as methods starting with \"test\".\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "LocalVariableCouldBeFinal",
              "shortDescription": {
                "text": "LocalVariableCouldBeFinal: Local variable 'commentRepo' could be declared final"
              },
              "fullDescription": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#localvariablecouldbefinal",
              "help": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableCouldBeFinal",
              "shortDescription": {
                "text": "LocalVariableCouldBeFinal: Local variable 'service' could be declared final"
              },
              "fullDescription": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#localvariablecouldbefinal",
              "help": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryFullyQualifiedName",
              "shortDescription": {
                "text": "UnnecessaryFullyQualifiedName: Unnecessary qualifier 'Mockito': 'when' is already in scope"
              },
              "fullDescription": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname",
              "help": {
                "text": "\nImport statements allow the use of non-fully qualified names.  The use of a fully qualified name\nwhich is covered by an import statement is redundant.  Consider using the non-fully qualified name.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedAssignment",
              "shortDescription": {
                "text": "UnusedAssignment: The value assigned to variable 'result' is never used (overwritten on line 69)"
              },
              "fullDescription": {
                "text": "\n            Reports assignments to variables that are never used before the variable is overwritten,\n            or goes out of scope. Unused assignments are those for which\n            1. The variable is never read after the assignment, or\n            2. The assigned value is always overwritten by other assignments before the next read of\n            the variable.\n\n            The rule doesn't consider assignments to fields except for those of `this` in a constructor,\n            or static fields of the current class in static initializers.\n\n            The rule may be suppressed with the standard `@SuppressWarnings(\"unused\")` tag.\n\n            The rule subsumes {% rule \"UnusedLocalVariable\" %}, and {% rule \"UnusedFormalParameter\" %}.\n            Those violations are filtered\n            out by default, in case you already have enabled those rules, but may be enabled with the property\n            `reportUnusedVariables`. Variables whose name starts with `ignored` or `unused` are filtered out, as\n            is standard practice for exceptions.\n\n            Limitations:\n            * The rule currently cannot know which method calls throw exceptions, or which exceptions they throw.\n            In the body of a try block, every method or constructor call is assumed to throw.  This may cause false-negatives.\n            The only other language construct that is assumed to throw is the `throw` statement, in particular,\n            things like `assert` statements, or NullPointerExceptions on dereference are ignored.\n            * The rule cannot resolve assignments across constructors, when they're called with the special\n            `this(...)` syntax. This may cause false-negatives.\n\n            Both of those limitations may be partly relaxed in PMD 7.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_bestpractices.html#unusedassignment",
              "help": {
                "text": "\n            Reports assignments to variables that are never used before the variable is overwritten,\n            or goes out of scope. Unused assignments are those for which\n            1. The variable is never read after the assignment, or\n            2. The assigned value is always overwritten by other assignments before the next read of\n            the variable.\n\n            The rule doesn't consider assignments to fields except for those of `this` in a constructor,\n            or static fields of the current class in static initializers.\n\n            The rule may be suppressed with the standard `@SuppressWarnings(\"unused\")` tag.\n\n            The rule subsumes {% rule \"UnusedLocalVariable\" %}, and {% rule \"UnusedFormalParameter\" %}.\n            Those violations are filtered\n            out by default, in case you already have enabled those rules, but may be enabled with the property\n            `reportUnusedVariables`. Variables whose name starts with `ignored` or `unused` are filtered out, as\n            is standard practice for exceptions.\n\n            Limitations:\n            * The rule currently cannot know which method calls throw exceptions, or which exceptions they throw.\n            In the body of a try block, every method or constructor call is assumed to throw.  This may cause false-negatives.\n            The only other language construct that is assumed to throw is the `throw` statement, in particular,\n            things like `assert` statements, or NullPointerExceptions on dereference are ignored.\n            * The rule cannot resolve assignments across constructors, when they're called with the special\n            `this(...)` syntax. This may cause false-negatives.\n\n            Both of those limitations may be partly relaxed in PMD 7.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "JUnitAssertionsShouldIncludeMessage",
              "shortDescription": {
                "text": "JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message"
              },
              "fullDescription": {
                "text": "\nJUnit assertions should include an informative message - i.e., use the three-argument version of\nassertEquals(), not the two-argument version.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_bestpractices.html#junitassertionsshouldincludemessage",
              "help": {
                "text": "\nJUnit assertions should include an informative message - i.e., use the three-argument version of\nassertEquals(), not the two-argument version.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "LinguisticNaming",
              "shortDescription": {
                "text": "LinguisticNaming: Linguistics Antipattern - The getter 'getCommentTest' should not return void linguistically"
              },
              "fullDescription": {
                "text": "\n            This rule finds Linguistic Naming Antipatterns. It checks for fields, that are named, as if they should\n            be boolean but have a different type. It also checks for methods, that according to their name, should\n            return a boolean, but don't. Further, it checks, that getters return something and setters won't.\n            Finally, it checks that methods, that start with \"to\" - so called transform methods - actually return\n            something, since according to their name, they should convert or transform one object into another.\n            There is additionally an option, to check for methods that contain \"To\" in their name - which are\n            also transform methods. However, this is disabled by default, since this detection is prone to\n            false positives.\n\n            For more information, see [Linguistic Antipatterns - What They Are and How\nDevelopers Perceive Them](https://doi.org/10.1007/s10664-014-9350-8).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#linguisticnaming",
              "help": {
                "text": "\n            This rule finds Linguistic Naming Antipatterns. It checks for fields, that are named, as if they should\n            be boolean but have a different type. It also checks for methods, that according to their name, should\n            return a boolean, but don't. Further, it checks, that getters return something and setters won't.\n            Finally, it checks that methods, that start with \"to\" - so called transform methods - actually return\n            something, since according to their name, they should convert or transform one object into another.\n            There is additionally an option, to check for methods that contain \"To\" in their name - which are\n            also transform methods. However, this is disabled by default, since this detection is prone to\n            false positives.\n\n            For more information, see [Linguistic Antipatterns - What They Are and How\nDevelopers Perceive Them](https://doi.org/10.1007/s10664-014-9350-8).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableCouldBeFinal",
              "shortDescription": {
                "text": "LocalVariableCouldBeFinal: Local variable 'videoId' could be declared final"
              },
              "fullDescription": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#localvariablecouldbefinal",
              "help": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LinguisticNaming",
              "shortDescription": {
                "text": "LinguisticNaming: Linguistics Antipattern - The getter 'getCommentTest1' should not return void linguistically"
              },
              "fullDescription": {
                "text": "\n            This rule finds Linguistic Naming Antipatterns. It checks for fields, that are named, as if they should\n            be boolean but have a different type. It also checks for methods, that according to their name, should\n            return a boolean, but don't. Further, it checks, that getters return something and setters won't.\n            Finally, it checks that methods, that start with \"to\" - so called transform methods - actually return\n            something, since according to their name, they should convert or transform one object into another.\n            There is additionally an option, to check for methods that contain \"To\" in their name - which are\n            also transform methods. However, this is disabled by default, since this detection is prone to\n            false positives.\n\n            For more information, see [Linguistic Antipatterns - What They Are and How\nDevelopers Perceive Them](https://doi.org/10.1007/s10664-014-9350-8).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#linguisticnaming",
              "help": {
                "text": "\n            This rule finds Linguistic Naming Antipatterns. It checks for fields, that are named, as if they should\n            be boolean but have a different type. It also checks for methods, that according to their name, should\n            return a boolean, but don't. Further, it checks, that getters return something and setters won't.\n            Finally, it checks that methods, that start with \"to\" - so called transform methods - actually return\n            something, since according to their name, they should convert or transform one object into another.\n            There is additionally an option, to check for methods that contain \"To\" in their name - which are\n            also transform methods. However, this is disabled by default, since this detection is prone to\n            false positives.\n\n            For more information, see [Linguistic Antipatterns - What They Are and How\nDevelopers Perceive Them](https://doi.org/10.1007/s10664-014-9350-8).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableCouldBeFinal",
              "shortDescription": {
                "text": "LocalVariableCouldBeFinal: Local variable 'result' could be declared final"
              },
              "fullDescription": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#localvariablecouldbefinal",
              "help": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableCouldBeFinal",
              "shortDescription": {
                "text": "LocalVariableCouldBeFinal: Local variable 'commentId' could be declared final"
              },
              "fullDescription": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#localvariablecouldbefinal",
              "help": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableCouldBeFinal",
              "shortDescription": {
                "text": "LocalVariableCouldBeFinal: Local variable 'exception' could be declared final"
              },
              "fullDescription": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#localvariablecouldbefinal",
              "help": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LocalVariableCouldBeFinal",
              "shortDescription": {
                "text": "LocalVariableCouldBeFinal: Local variable 'response' could be declared final"
              },
              "fullDescription": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_codestyle.html#localvariablecouldbefinal",
              "help": {
                "text": "\nA local variable assigned only once can be declared final.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LawOfDemeter",
              "shortDescription": {
                "text": "LawOfDemeter: Call to `getBody` on foreign value `response` (degree 1)"
              },
              "fullDescription": {
                "text": "\nThe law of Demeter is a simple rule that says \"only talk to friends\". It forbids\nfetching data from \"too far away\", for some definition of distance, in order to\nreduce coupling between classes or objects of different levels of abstraction.\n\nThe rule uses a notion of \"degree\", that quantifies how \"far\" an object is.\nExpressions with too high degree can only be used in certain ways. The degree of\nan expression is defined inductively:\n- The degree of `this` is 0\n- The degree of a method parameter is 1\n- The degree of a new object created in a method is 1\n- The degree of a static variable is 1\n- The degree of a field access expression like `expr.field` is the degree of `expr` plus 1\n- The degree of a \"getter expression\" like `expr.getFoo()` is the degree of `expr` plus 1\n- The degree of a \"transformation expression\" like `expr.withFoo(\"\")` is the degree of `expr`\n- The degree of a variable is the maximum degree of all the assignments that reach it\n\nIntuitively, the more you call getters, the more the degree increases. Eventually\nthe degree reaches the report threshold (property `trustRadius`) and the expression\nis reported. The details of the calculation are more involved and make room for common\npatterns, like usage of collections (objects that are in a list or array have the\nsame degree as their container), the builder pattern, and getters that do not appear\nto break a boundary of abstraction.\n\nBe aware that this rule is prone to many false-positives and low-priority warnings.\nYou can increase the `trustRadius` property to reduce them drastically. The default\n`trustRadius` of 1 corresponds to the original law of Demeter (you're only allowed\none getter call on untrusted values). Given some `trustRadius` value:\n- expressions of degree lower or equal to `trustRadius` are not reported\n- expressions of degree exactly `trustRadius + 1` are reported, unless they are only returned\nfrom the current method, or passed as argument to another method. Without this exception it\nwould not be possible to extract any information from e.g. method parameters.\n- values of degree strictly greater than `trustRadius + 1` are not reported. The\nintuition is that to obtain a value of degree `n > 1` then you must use an expression\nof degree `n - 1`, so if you have `n > trustRadius + 1`, there you're using some value\nof degree `trustRadius + 1` that will be reported.\n\nSee also the references:\n\n*   Andrew Hunt, David Thomas, and Ward Cunningham. The Pragmatic Programmer. From Journeyman to Master. Addison-Wesley Longman, Amsterdam, October 1999.;\n*   K.J. Lieberherr and I.M. Holland. Assuring good style for object-oriented programs. Software, IEEE, 6(5):38–48, 1989.;\n*   <http://www.ccs.neu.edu/home/lieber/LoD.html>\n*   <http://en.wikipedia.org/wiki/Law_of_Demeter>\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.0.0-rc3/pmd_rules_java_design.html#lawofdemeter",
              "help": {
                "text": "\nThe law of Demeter is a simple rule that says \"only talk to friends\". It forbids\nfetching data from \"too far away\", for some definition of distance, in order to\nreduce coupling between classes or objects of different levels of abstraction.\n\nThe rule uses a notion of \"degree\", that quantifies how \"far\" an object is.\nExpressions with too high degree can only be used in certain ways. The degree of\nan expression is defined inductively:\n- The degree of `this` is 0\n- The degree of a method parameter is 1\n- The degree of a new object created in a method is 1\n- The degree of a static variable is 1\n- The degree of a field access expression like `expr.field` is the degree of `expr` plus 1\n- The degree of a \"getter expression\" like `expr.getFoo()` is the degree of `expr` plus 1\n- The degree of a \"transformation expression\" like `expr.withFoo(\"\")` is the degree of `expr`\n- The degree of a variable is the maximum degree of all the assignments that reach it\n\nIntuitively, the more you call getters, the more the degree increases. Eventually\nthe degree reaches the report threshold (property `trustRadius`) and the expression\nis reported. The details of the calculation are more involved and make room for common\npatterns, like usage of collections (objects that are in a list or array have the\nsame degree as their container), the builder pattern, and getters that do not appear\nto break a boundary of abstraction.\n\nBe aware that this rule is prone to many false-positives and low-priority warnings.\nYou can increase the `trustRadius` property to reduce them drastically. The default\n`trustRadius` of 1 corresponds to the original law of Demeter (you're only allowed\none getter call on untrusted values). Given some `trustRadius` value:\n- expressions of degree lower or equal to `trustRadius` are not reported\n- expressions of degree exactly `trustRadius + 1` are reported, unless they are only returned\nfrom the current method, or passed as argument to another method. Without this exception it\nwould not be possible to extract any information from e.g. method parameters.\n- values of degree strictly greater than `trustRadius + 1` are not reported. The\nintuition is that to obtain a value of degree `n > 1` then you must use an expression\nof degree `n - 1`, so if you have `n > trustRadius + 1`, there you're using some value\nof degree `trustRadius + 1` that will be reported.\n\nSee also the references:\n\n*   Andrew Hunt, David Thomas, and Ward Cunningham. The Pragmatic Programmer. From Journeyman to Master. Addison-Wesley Longman, Amsterdam, October 1999.;\n*   K.J. Lieberherr and I.M. Holland. Assuring good style for object-oriented programs. Software, IEEE, 6(5):38–48, 1989.;\n*   <http://www.ccs.neu.edu/home/lieber/LoD.html>\n*   <http://en.wikipedia.org/wiki/Law_of_Demeter>\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 0,
          "message": {
            "text": "CommentRequired: Class comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/MediaPlayerApplication.java"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 0,
                  "endLine": 7,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 1,
          "message": {
            "text": "UseUtilityClass: This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/MediaPlayerApplication.java"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 0,
                  "endLine": 7,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/MediaPlayerApplication.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 0,
                  "endLine": 9,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 3,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'args' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/MediaPlayerApplication.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 0,
                  "endLine": 9,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 4,
          "message": {
            "text": "UnnecessaryImport: Unused import 'org.springframework.http.ResponseEntity'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 0,
                  "endLine": 9,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 5,
          "message": {
            "text": "UnnecessaryImport: Unused import 'org.springframework.web.bind.annotation.ExceptionHandler'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 0,
                  "endLine": 11,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 6,
          "message": {
            "text": "UnnecessaryImport: Unused import 'org.springframework.web.bind.annotation.PutMapping'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 0,
                  "endLine": 15,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 7,
          "message": {
            "text": "UnnecessaryImport: Unused import 'org.springframework.web.bind.annotation.RequestParam'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 0,
                  "endLine": 17,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 8,
          "message": {
            "text": "UnnecessaryImport: Unused import 'org.springframework.web.method.annotation.MethodArgumentTypeMismatchException'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 0,
                  "endLine": 19,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 9,
          "message": {
            "text": "UnnecessaryImport: Unused import 'com.mediaplayer.service.CommentService'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 0,
                  "endLine": 22,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 10,
          "message": {
            "text": "UnnecessaryImport: Unused import 'jakarta.persistence.EntityManager'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 0,
                  "endLine": 25,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 11,
          "message": {
            "text": "UnnecessaryImport: Unused import 'jakarta.persistence.PersistenceContext'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 0,
                  "endLine": 26,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "AtLeastOneConstructor",
          "ruleIndex": 12,
          "message": {
            "text": "AtLeastOneConstructor: Each class should declare at least one constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 0,
                  "endLine": 30,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 0,
          "message": {
            "text": "CommentRequired: Class comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 0,
                  "endLine": 30,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 13,
          "message": {
            "text": "CommentRequired: Field comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 0,
                  "endLine": 32,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentDefaultAccessModifier",
          "ruleIndex": 14,
          "message": {
            "text": "CommentDefaultAccessModifier: Missing commented default access modifier on field 'logger'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 0,
                  "endLine": 33,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 13,
          "message": {
            "text": "CommentRequired: Field comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 0,
                  "endLine": 33,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 0,
                  "endLine": 36,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 15,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'c' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 0,
                  "endLine": 36,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "ShortVariable",
          "ruleIndex": 16,
          "message": {
            "text": "ShortVariable: Avoid variables with short names like c"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 0,
                  "endLine": 36,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 17,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'comment' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 0,
                  "endLine": 38,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryLocalBeforeReturn",
          "ruleIndex": 18,
          "message": {
            "text": "UnnecessaryLocalBeforeReturn: Consider simply returning the value vs storing it in local variable 'comment'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 0,
                  "endLine": 38,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 0,
                  "endLine": 45,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 19,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'videoId' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 0,
                  "endLine": 45,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 0,
                  "endLine": 51,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 20,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'commentId' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 0,
                  "endLine": 51,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 0,
                  "endLine": 58,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 21,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'response' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/controller/CommentController.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 0,
                  "endLine": 58,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 22,
          "message": {
            "text": "UnnecessaryImport: Unused import 'lombok.AllArgsConstructor'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 0,
                  "endLine": 11,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 23,
          "message": {
            "text": "UnnecessaryImport: Unused import 'lombok.Data'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 0,
                  "endLine": 12,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 0,
          "message": {
            "text": "CommentRequired: Class comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 0,
                  "endLine": 20,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "DataClass",
          "ruleIndex": 24,
          "message": {
            "text": "DataClass: The class 'Comment' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=12, WMC=13)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 0,
                  "endLine": 20,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 13,
          "message": {
            "text": "CommentRequired: Field comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 0,
                  "endLine": 24,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 13,
          "message": {
            "text": "CommentRequired: Field comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 0,
                  "endLine": 25,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 13,
          "message": {
            "text": "CommentRequired: Field comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 0,
                  "endLine": 26,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 13,
          "message": {
            "text": "CommentRequired: Field comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 0,
                  "endLine": 27,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 13,
          "message": {
            "text": "CommentRequired: Field comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 0,
                  "endLine": 29,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 13,
          "message": {
            "text": "CommentRequired: Field comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 0,
                  "endLine": 31,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 0,
                  "endLine": 34,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 20,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'commentId' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 0,
                  "endLine": 34,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 25,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'date' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 0,
                  "endLine": 34,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 26,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'message' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 0,
                  "endLine": 34,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 27,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'time' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 0,
                  "endLine": 34,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 20,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'commentId' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 0,
                  "endLine": 47,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 26,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'message' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 0,
                  "endLine": 57,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 28,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'userId' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 0,
                  "endLine": 67,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 19,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'videoId' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 0,
                  "endLine": 77,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 25,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'date' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 0,
                  "endLine": 87,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 27,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'time' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/entity/Comment.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 0,
                  "endLine": 97,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "PackageCase",
          "ruleIndex": 29,
          "message": {
            "text": "PackageCase: Package name contains upper case characters"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/exceptionHandler/GlobalExceptionHandler.java"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 0,
                  "endLine": 1,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "AtLeastOneConstructor",
          "ruleIndex": 12,
          "message": {
            "text": "AtLeastOneConstructor: Each class should declare at least one constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/exceptionHandler/GlobalExceptionHandler.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 0,
                  "endLine": 19,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 0,
          "message": {
            "text": "CommentRequired: Class comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/exceptionHandler/GlobalExceptionHandler.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 0,
                  "endLine": 19,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/exceptionHandler/GlobalExceptionHandler.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 0,
                  "endLine": 22,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 30,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'ex' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/exceptionHandler/GlobalExceptionHandler.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 0,
                  "endLine": 22,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "ShortVariable",
          "ruleIndex": 31,
          "message": {
            "text": "ShortVariable: Avoid variables with short names like ex"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/exceptionHandler/GlobalExceptionHandler.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 0,
                  "endLine": 22,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 32,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'errorResponse' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/exceptionHandler/GlobalExceptionHandler.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 0,
                  "endLine": 23,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 33,
          "message": {
            "text": "UnnecessaryImport: Unused import 'org.springframework.web.bind.annotation.ResponseStatus'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/exceptions/InvalidCommentException.java"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 0,
                  "endLine": 7,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 23,
          "message": {
            "text": "UnnecessaryImport: Unused import 'lombok.Data'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/exceptions/InvalidCommentException.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 0,
                  "endLine": 9,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 0,
          "message": {
            "text": "CommentRequired: Class comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/exceptions/InvalidCommentException.java"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 0,
                  "endLine": 11,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MissingSerialVersionUID",
          "ruleIndex": 34,
          "message": {
            "text": "MissingSerialVersionUID: Classes implementing Serializable should set a serialVersionUID"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/exceptions/InvalidCommentException.java"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 0,
                  "endLine": 11,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 13,
          "message": {
            "text": "CommentRequired: Field comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/exceptions/InvalidCommentException.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 0,
                  "endLine": 12,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 13,
          "message": {
            "text": "CommentRequired: Field comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/exceptions/InvalidCommentException.java"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 0,
                  "endLine": 13,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 13,
          "message": {
            "text": "CommentRequired: Field comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/exceptions/InvalidCommentException.java"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 0,
                  "endLine": 14,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CallSuperInConstructor",
          "ruleIndex": 35,
          "message": {
            "text": "CallSuperInConstructor: It is a good practice to call super() in a constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/exceptions/InvalidCommentException.java"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 0,
                  "endLine": 16,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/exceptions/InvalidCommentException.java"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 0,
                  "endLine": 16,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 26,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'message' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/exceptions/InvalidCommentException.java"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 0,
                  "endLine": 16,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 36,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'status' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/exceptions/InvalidCommentException.java"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 0,
                  "endLine": 16,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MissingOverride",
          "ruleIndex": 37,
          "message": {
            "text": "MissingOverride: The method 'getMessage()' is missing an @Override annotation."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/exceptions/InvalidCommentException.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 0,
                  "endLine": 26,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 0,
          "message": {
            "text": "CommentRequired: Class comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/repository/CommentRepository.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 0,
                  "endLine": 18,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/repository/CommentRepository.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 0,
                  "endLine": 20,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 38,
          "message": {
            "text": "FormalParameterNamingConventions: The method parameter name 'VideoId' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/repository/CommentRepository.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 0,
                  "endLine": 20,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/repository/CommentRepository.java"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 0,
                  "endLine": 24,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 0,
          "message": {
            "text": "CommentRequired: Class comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/response/ErrorResponse.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 0,
                  "endLine": 5,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 13,
          "message": {
            "text": "CommentRequired: Field comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/response/ErrorResponse.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 0,
                  "endLine": 6,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "ImmutableField",
          "ruleIndex": 39,
          "message": {
            "text": "ImmutableField: Field 'status' may be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/response/ErrorResponse.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 0,
                  "endLine": 6,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 13,
          "message": {
            "text": "CommentRequired: Field comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/response/ErrorResponse.java"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 0,
                  "endLine": 7,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "ImmutableField",
          "ruleIndex": 40,
          "message": {
            "text": "ImmutableField: Field 'message' may be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/response/ErrorResponse.java"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 0,
                  "endLine": 7,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 13,
          "message": {
            "text": "CommentRequired: Field comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/response/ErrorResponse.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 0,
                  "endLine": 8,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "ImmutableField",
          "ruleIndex": 41,
          "message": {
            "text": "ImmutableField: Field 'timestamp' may be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/response/ErrorResponse.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 0,
                  "endLine": 8,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/response/ErrorResponse.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 0,
                  "endLine": 10,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 26,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'message' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/response/ErrorResponse.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 0,
                  "endLine": 10,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 36,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'status' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/response/ErrorResponse.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 0,
                  "endLine": 10,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 42,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'timestamp' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/response/ErrorResponse.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 0,
                  "endLine": 10,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 0,
          "message": {
            "text": "CommentRequired: Class comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 0,
                  "endLine": 18,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 13,
          "message": {
            "text": "CommentRequired: Field comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 0,
                  "endLine": 20,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "ImmutableField",
          "ruleIndex": 43,
          "message": {
            "text": "ImmutableField: Field 'commentRepo' may be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 0,
                  "endLine": 20,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 0,
                  "endLine": 29,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 44,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'commentRepo' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 0,
                  "endLine": 29,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUncheckedExceptionsInSignatures",
          "ruleIndex": 45,
          "message": {
            "text": "AvoidUncheckedExceptionsInSignatures: A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 0,
                  "endLine": 34,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 15,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'c' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 0,
                  "endLine": 34,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MissingOverride",
          "ruleIndex": 46,
          "message": {
            "text": "MissingOverride: The method 'addnewComment(Comment)' is missing an @Override annotation."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 0,
                  "endLine": 34,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "ShortVariable",
          "ruleIndex": 16,
          "message": {
            "text": "ShortVariable: Avoid variables with short names like c"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 0,
                  "endLine": 34,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 17,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'comment' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 0,
                  "endLine": 41,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryLocalBeforeReturn",
          "ruleIndex": 18,
          "message": {
            "text": "UnnecessaryLocalBeforeReturn: Consider simply returning the value vs storing it in local variable 'comment'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 0,
                  "endLine": 41,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUncheckedExceptionsInSignatures",
          "ruleIndex": 45,
          "message": {
            "text": "AvoidUncheckedExceptionsInSignatures: A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 0,
                  "endLine": 46,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 19,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'videoId' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 0,
                  "endLine": 46,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MissingOverride",
          "ruleIndex": 47,
          "message": {
            "text": "MissingOverride: The method 'allComments(int)' is missing an @Override annotation."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 0,
                  "endLine": 46,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 48,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'list' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 0,
                  "endLine": 48,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUncheckedExceptionsInSignatures",
          "ruleIndex": 45,
          "message": {
            "text": "AvoidUncheckedExceptionsInSignatures: A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 0,
                  "endLine": 59,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodArgumentCouldBeFinal",
          "ruleIndex": 20,
          "message": {
            "text": "MethodArgumentCouldBeFinal: Parameter 'commentId' is not assigned and could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 0,
                  "endLine": 59,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "MissingOverride",
          "ruleIndex": 49,
          "message": {
            "text": "MissingOverride: The method 'deleteComment(int)' is missing an @Override annotation."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 0,
                  "endLine": 59,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 50,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'c' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 0,
                  "endLine": 60,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "ShortVariable",
          "ruleIndex": 16,
          "message": {
            "text": "ShortVariable: Avoid variables with short names like c"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentService.java"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 0,
                  "endLine": 60,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 51,
          "message": {
            "text": "UnnecessaryImport: Unused import 'com.mediaplayer.exceptions.InvalidCommentException'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentServiceint.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 0,
                  "endLine": 6,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 0,
          "message": {
            "text": "CommentRequired: Class comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentServiceint.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 0,
                  "endLine": 8,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentServiceint.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 0,
                  "endLine": 10,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentServiceint.java"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 0,
                  "endLine": 12,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentServiceint.java"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 0,
                  "endLine": 14,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "ShortVariable",
          "ruleIndex": 16,
          "message": {
            "text": "ShortVariable: Avoid variables with short names like c"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/main/java/com/mediaplayer/service/CommentServiceint.java"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 0,
                  "endLine": 14,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "AtLeastOneConstructor",
          "ruleIndex": 12,
          "message": {
            "text": "AtLeastOneConstructor: Each class should declare at least one constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/MediaPlayerApplicationTests.java"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 0,
                  "endLine": 7,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 0,
          "message": {
            "text": "CommentRequired: Class comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/MediaPlayerApplicationTests.java"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 0,
                  "endLine": 7,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnitTestsShouldIncludeAssert",
          "ruleIndex": 52,
          "message": {
            "text": "JUnitTestsShouldIncludeAssert: JUnit tests should include assert() or fail()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/MediaPlayerApplicationTests.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 0,
                  "endLine": 10,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UncommentedEmptyMethodBody",
          "ruleIndex": 53,
          "message": {
            "text": "UncommentedEmptyMethodBody: Document empty method body"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/MediaPlayerApplicationTests.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 0,
                  "endLine": 11,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "TooManyStaticImports",
          "ruleIndex": 54,
          "message": {
            "text": "TooManyStaticImports: Too many static imports may lead to messy code"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 0,
                  "endLine": 150,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "AtLeastOneConstructor",
          "ruleIndex": 12,
          "message": {
            "text": "AtLeastOneConstructor: Each class should declare at least one constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 0,
                  "endLine": 40,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 55,
          "message": {
            "text": "ClassNamingConventions: The class name 'commentServiceImplStub' doesn't match '^Test.*$|^[A-Z][a-zA-Z0-9]*Test(s|Case)?$'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 0,
                  "endLine": 40,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 0,
          "message": {
            "text": "CommentRequired: Class comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 0,
                  "endLine": 40,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnit5TestShouldBePackagePrivate",
          "ruleIndex": 56,
          "message": {
            "text": "JUnit5TestShouldBePackagePrivate: JUnit 5 tests should be package-private."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 0,
                  "endLine": 40,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 13,
          "message": {
            "text": "CommentRequired: Field comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 0,
                  "endLine": 43,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LongVariable",
          "ruleIndex": 57,
          "message": {
            "text": "LongVariable: Avoid excessively long variable names like globalExceptionHandler"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 0,
                  "endLine": 43,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 0,
                  "endLine": 45,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnit5TestShouldBePackagePrivate",
          "ruleIndex": 56,
          "message": {
            "text": "JUnit5TestShouldBePackagePrivate: JUnit 5 tests should be package-private."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 0,
                  "endLine": 45,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnitTestContainsTooManyAsserts",
          "ruleIndex": 58,
          "message": {
            "text": "JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 0,
                  "endLine": 45,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 59,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'commentRepo' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 0,
                  "endLine": 46,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 60,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'service' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 0,
                  "endLine": 47,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 17,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'comment' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 0,
                  "endLine": 49,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUncheckedExceptionsInSignatures",
          "ruleIndex": 45,
          "message": {
            "text": "AvoidUncheckedExceptionsInSignatures: A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 0,
                  "endLine": 61,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 0,
                  "endLine": 61,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnit5TestShouldBePackagePrivate",
          "ruleIndex": 56,
          "message": {
            "text": "JUnit5TestShouldBePackagePrivate: JUnit 5 tests should be package-private."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 0,
                  "endLine": 61,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnitTestContainsTooManyAsserts",
          "ruleIndex": 58,
          "message": {
            "text": "JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 0,
                  "endLine": 61,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 59,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'commentRepo' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 0,
                  "endLine": 62,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 60,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'service' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 0,
                  "endLine": 63,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 17,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'comment' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 0,
                  "endLine": 65,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 61,
          "message": {
            "text": "UnnecessaryFullyQualifiedName: Unnecessary qualifier 'Mockito': 'when' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 0,
                  "endLine": 67,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedAssignment",
          "ruleIndex": 62,
          "message": {
            "text": "UnusedAssignment: The value assigned to variable 'result' is never used (overwritten on line 69)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 0,
                  "endLine": 69,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnitAssertionsShouldIncludeMessage",
          "ruleIndex": 63,
          "message": {
            "text": "JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 0,
                  "endLine": 70,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnitAssertionsShouldIncludeMessage",
          "ruleIndex": 63,
          "message": {
            "text": "JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 0,
                  "endLine": 71,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 0,
                  "endLine": 77,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnit5TestShouldBePackagePrivate",
          "ruleIndex": 56,
          "message": {
            "text": "JUnit5TestShouldBePackagePrivate: JUnit 5 tests should be package-private."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 0,
                  "endLine": 77,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnitTestContainsTooManyAsserts",
          "ruleIndex": 58,
          "message": {
            "text": "JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 0,
                  "endLine": 77,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LinguisticNaming",
          "ruleIndex": 64,
          "message": {
            "text": "LinguisticNaming: Linguistics Antipattern - The getter 'getCommentTest' should not return void linguistically"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 0,
                  "endLine": 77,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 59,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'commentRepo' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 0,
                  "endLine": 78,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 60,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'service' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 0,
                  "endLine": 79,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 65,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'videoId' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 0,
                  "endLine": 81,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUncheckedExceptionsInSignatures",
          "ruleIndex": 45,
          "message": {
            "text": "AvoidUncheckedExceptionsInSignatures: A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 0,
                  "endLine": 92,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 0,
                  "endLine": 92,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnit5TestShouldBePackagePrivate",
          "ruleIndex": 56,
          "message": {
            "text": "JUnit5TestShouldBePackagePrivate: JUnit 5 tests should be package-private."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 0,
                  "endLine": 92,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnitTestContainsTooManyAsserts",
          "ruleIndex": 58,
          "message": {
            "text": "JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 0,
                  "endLine": 92,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LinguisticNaming",
          "ruleIndex": 66,
          "message": {
            "text": "LinguisticNaming: Linguistics Antipattern - The getter 'getCommentTest1' should not return void linguistically"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 0,
                  "endLine": 92,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 59,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'commentRepo' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 0,
                  "endLine": 93,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 60,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'service' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 0,
                  "endLine": 94,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 65,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'videoId' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 0,
                  "endLine": 96,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 48,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'list' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 0,
                  "endLine": 97,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 61,
          "message": {
            "text": "UnnecessaryFullyQualifiedName: Unnecessary qualifier 'Mockito': 'when' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 0,
                  "endLine": 100,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 67,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'result' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 0,
                  "endLine": 101,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnitAssertionsShouldIncludeMessage",
          "ruleIndex": 63,
          "message": {
            "text": "JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 0,
                  "endLine": 102,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnitAssertionsShouldIncludeMessage",
          "ruleIndex": 63,
          "message": {
            "text": "JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 0,
                  "endLine": 104,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 0,
                  "endLine": 110,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnit5TestShouldBePackagePrivate",
          "ruleIndex": 56,
          "message": {
            "text": "JUnit5TestShouldBePackagePrivate: JUnit 5 tests should be package-private."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 0,
                  "endLine": 110,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnitTestContainsTooManyAsserts",
          "ruleIndex": 58,
          "message": {
            "text": "JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 0,
                  "endLine": 110,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 59,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'commentRepo' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 0,
                  "endLine": 111,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 60,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'service' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 0,
                  "endLine": 112,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 68,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'commentId' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 0,
                  "endLine": 114,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 61,
          "message": {
            "text": "UnnecessaryFullyQualifiedName: Unnecessary qualifier 'Mockito': 'when' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 0,
                  "endLine": 115,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "AvoidUncheckedExceptionsInSignatures",
          "ruleIndex": 45,
          "message": {
            "text": "AvoidUncheckedExceptionsInSignatures: A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 0,
                  "endLine": 126,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 0,
                  "endLine": 126,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnit5TestShouldBePackagePrivate",
          "ruleIndex": 56,
          "message": {
            "text": "JUnit5TestShouldBePackagePrivate: JUnit 5 tests should be package-private."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 0,
                  "endLine": 126,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnitTestContainsTooManyAsserts",
          "ruleIndex": 58,
          "message": {
            "text": "JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 0,
                  "endLine": 126,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 59,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'commentRepo' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 0,
                  "endLine": 127,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 60,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'service' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 0,
                  "endLine": 128,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 68,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'commentId' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 0,
                  "endLine": 130,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryFullyQualifiedName",
          "ruleIndex": 61,
          "message": {
            "text": "UnnecessaryFullyQualifiedName: Unnecessary qualifier 'Mockito': 'when' is already in scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 0,
                  "endLine": 131,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 67,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'result' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 0,
                  "endLine": 132,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnitAssertionsShouldIncludeMessage",
          "ruleIndex": 63,
          "message": {
            "text": "JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 0,
                  "endLine": 133,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "CommentRequired",
          "ruleIndex": 2,
          "message": {
            "text": "CommentRequired: Public method and constructor comments are required"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 0,
                  "endLine": 138,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnit5TestShouldBePackagePrivate",
          "ruleIndex": 56,
          "message": {
            "text": "JUnit5TestShouldBePackagePrivate: JUnit 5 tests should be package-private."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 0,
                  "endLine": 138,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnitTestContainsTooManyAsserts",
          "ruleIndex": 58,
          "message": {
            "text": "JUnitTestContainsTooManyAsserts: Unit tests should not contain more than 1 assert(s)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 0,
                  "endLine": 138,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 69,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'exception' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 0,
                  "endLine": 139,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 70,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'response' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 0,
                  "endLine": 140,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnitAssertionsShouldIncludeMessage",
          "ruleIndex": 63,
          "message": {
            "text": "JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 0,
                  "endLine": 142,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LawOfDemeter",
          "ruleIndex": 71,
          "message": {
            "text": "LawOfDemeter: Call to `getBody` on foreign value `response` (degree 1)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 0,
                  "endLine": 143,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "LocalVariableCouldBeFinal",
          "ruleIndex": 32,
          "message": {
            "text": "LocalVariableCouldBeFinal: Local variable 'errorResponse' could be declared final"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 0,
                  "endLine": 143,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnitAssertionsShouldIncludeMessage",
          "ruleIndex": 63,
          "message": {
            "text": "JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 0,
                  "endLine": 144,
                  "endColumn": 0
                }
              }
            }
          ]
        },
        {
          "ruleId": "JUnitAssertionsShouldIncludeMessage",
          "ruleIndex": 63,
          "message": {
            "text": "JUnitAssertionsShouldIncludeMessage: JUnit assertions should include a message"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://src/test/java/com/mediaplayer/service/commentServiceImplStub.java"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 0,
                  "endLine": 146,
                  "endColumn": 0
                }
              }
            }
          ]
        }
      ],
      "invocations": [
        {
          "executionSuccessful": true,
          "toolConfigurationNotifications": [],
          "toolExecutionNotifications": []
        }
      ]
    }
  ]
}
